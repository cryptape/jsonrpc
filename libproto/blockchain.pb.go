// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

package libproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProofType int32

const (
	ProofType_AuthorityRound ProofType = 0
	ProofType_Raft           ProofType = 1
	ProofType_Tendermint     ProofType = 2
)

var ProofType_name = map[int32]string{
	0: "AuthorityRound",
	1: "Raft",
	2: "Tendermint",
}
var ProofType_value = map[string]int32{
	"AuthorityRound": 0,
	"Raft":           1,
	"Tendermint":     2,
}

func (x ProofType) String() string {
	return proto.EnumName(ProofType_name, int32(x))
}
func (ProofType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Crypto int32

const (
	Crypto_SECP Crypto = 0
	Crypto_SM2  Crypto = 1
)

var Crypto_name = map[int32]string{
	0: "SECP",
	1: "SM2",
}
var Crypto_value = map[string]int32{
	"SECP": 0,
	"SM2":  1,
}

func (x Crypto) String() string {
	return proto.EnumName(Crypto_name, int32(x))
}
func (Crypto) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Proof struct {
	Content []byte    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Type    ProofType `protobuf:"varint,2,opt,name=type,enum=ProofType" json:"type,omitempty"`
}

func (m *Proof) Reset()                    { *m = Proof{} }
func (m *Proof) String() string            { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()               {}
func (*Proof) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Proof) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Proof) GetType() ProofType {
	if m != nil {
		return m.Type
	}
	return ProofType_AuthorityRound
}

type BlockHeader struct {
	Prevhash         []byte `protobuf:"bytes,1,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	Timestamp        uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Height           uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	StateRoot        []byte `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	TransactionsRoot []byte `protobuf:"bytes,5,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	ReceiptsRoot     []byte `protobuf:"bytes,6,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	GasUsed          uint64 `protobuf:"varint,7,opt,name=gas_used,json=gasUsed" json:"gas_used,omitempty"`
	GasLimit         uint64 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	Proof            *Proof `protobuf:"bytes,9,opt,name=proof" json:"proof,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *BlockHeader) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BlockHeader) GetTransactionsRoot() []byte {
	if m != nil {
		return m.TransactionsRoot
	}
	return nil
}

func (m *BlockHeader) GetReceiptsRoot() []byte {
	if m != nil {
		return m.ReceiptsRoot
	}
	return nil
}

func (m *BlockHeader) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *BlockHeader) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *BlockHeader) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type Status struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Status) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Status) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type AccountGasLimit struct {
	CommonGasLimit   uint64            `protobuf:"varint,1,opt,name=common_gas_limit,json=commonGasLimit" json:"common_gas_limit,omitempty"`
	SpecificGasLimit map[string]uint64 `protobuf:"bytes,2,rep,name=specific_gas_limit,json=specificGasLimit" json:"specific_gas_limit,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *AccountGasLimit) Reset()                    { *m = AccountGasLimit{} }
func (m *AccountGasLimit) String() string            { return proto.CompactTextString(m) }
func (*AccountGasLimit) ProtoMessage()               {}
func (*AccountGasLimit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AccountGasLimit) GetCommonGasLimit() uint64 {
	if m != nil {
		return m.CommonGasLimit
	}
	return 0
}

func (m *AccountGasLimit) GetSpecificGasLimit() map[string]uint64 {
	if m != nil {
		return m.SpecificGasLimit
	}
	return nil
}

type RichStatus struct {
	Hash   []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64   `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Nodes  [][]byte `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *RichStatus) Reset()                    { *m = RichStatus{} }
func (m *RichStatus) String() string            { return proto.CompactTextString(m) }
func (*RichStatus) ProtoMessage()               {}
func (*RichStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RichStatus) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RichStatus) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RichStatus) GetNodes() [][]byte {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Transaction struct {
	To              string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Nonce           string `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	Quota           uint64 `protobuf:"varint,3,opt,name=quota" json:"quota,omitempty"`
	ValidUntilBlock uint64 `protobuf:"varint,4,opt,name=valid_until_block,json=validUntilBlock" json:"valid_until_block,omitempty"`
	Data            []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Transaction) GetQuota() uint64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *Transaction) GetValidUntilBlock() uint64 {
	if m != nil {
		return m.ValidUntilBlock
	}
	return 0
}

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnverifiedTransaction struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	Signature   []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Crypto      Crypto       `protobuf:"varint,3,opt,name=crypto,enum=Crypto" json:"crypto,omitempty"`
}

func (m *UnverifiedTransaction) Reset()                    { *m = UnverifiedTransaction{} }
func (m *UnverifiedTransaction) String() string            { return proto.CompactTextString(m) }
func (*UnverifiedTransaction) ProtoMessage()               {}
func (*UnverifiedTransaction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *UnverifiedTransaction) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *UnverifiedTransaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *UnverifiedTransaction) GetCrypto() Crypto {
	if m != nil {
		return m.Crypto
	}
	return Crypto_SECP
}

type SignedTransaction struct {
	TransactionWithSig *UnverifiedTransaction `protobuf:"bytes,1,opt,name=transaction_with_sig,json=transactionWithSig" json:"transaction_with_sig,omitempty"`
	TxHash             []byte                 `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Signer             []byte                 `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *SignedTransaction) Reset()                    { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string            { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()               {}
func (*SignedTransaction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *SignedTransaction) GetTransactionWithSig() *UnverifiedTransaction {
	if m != nil {
		return m.TransactionWithSig
	}
	return nil
}

func (m *SignedTransaction) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *SignedTransaction) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

type BlockBody struct {
	Transactions []*SignedTransaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *BlockBody) GetTransactions() []*SignedTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Block struct {
	Version uint32       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Header  *BlockHeader `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Body    *BlockBody   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Block) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetBody() *BlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type BlockWithProof struct {
	Blk   *Block `protobuf:"bytes,1,opt,name=blk" json:"blk,omitempty"`
	Proof *Proof `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *BlockWithProof) Reset()                    { *m = BlockWithProof{} }
func (m *BlockWithProof) String() string            { return proto.CompactTextString(m) }
func (*BlockWithProof) ProtoMessage()               {}
func (*BlockWithProof) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *BlockWithProof) GetBlk() *Block {
	if m != nil {
		return m.Blk
	}
	return nil
}

func (m *BlockWithProof) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type BlockTxs struct {
	Height uint64     `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Body   *BlockBody `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *BlockTxs) Reset()                    { *m = BlockTxs{} }
func (m *BlockTxs) String() string            { return proto.CompactTextString(m) }
func (*BlockTxs) ProtoMessage()               {}
func (*BlockTxs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *BlockTxs) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockTxs) GetBody() *BlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Proof)(nil), "Proof")
	proto.RegisterType((*BlockHeader)(nil), "BlockHeader")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*AccountGasLimit)(nil), "AccountGasLimit")
	proto.RegisterType((*RichStatus)(nil), "RichStatus")
	proto.RegisterType((*Transaction)(nil), "Transaction")
	proto.RegisterType((*UnverifiedTransaction)(nil), "UnverifiedTransaction")
	proto.RegisterType((*SignedTransaction)(nil), "SignedTransaction")
	proto.RegisterType((*BlockBody)(nil), "BlockBody")
	proto.RegisterType((*Block)(nil), "Block")
	proto.RegisterType((*BlockWithProof)(nil), "BlockWithProof")
	proto.RegisterType((*BlockTxs)(nil), "BlockTxs")
	proto.RegisterEnum("ProofType", ProofType_name, ProofType_value)
	proto.RegisterEnum("Crypto", Crypto_name, Crypto_value)
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 786 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xd1, 0x6e, 0xe3, 0x44,
	0x14, 0x5d, 0x3b, 0x89, 0x93, 0xdc, 0x64, 0xb3, 0xee, 0x68, 0x77, 0x31, 0xbb, 0x0b, 0x44, 0x06,
	0xa1, 0xa8, 0x48, 0x7e, 0x08, 0x08, 0x01, 0x6f, 0x6d, 0xb5, 0xa2, 0x0f, 0x80, 0x56, 0x93, 0x54,
	0x3c, 0x46, 0x53, 0x7b, 0x1a, 0x8f, 0x9a, 0xcc, 0x18, 0xcf, 0x75, 0x68, 0x7e, 0x00, 0x89, 0x17,
	0x3e, 0x83, 0x4f, 0xe2, 0x7b, 0xd0, 0x5c, 0x3b, 0x8d, 0xbb, 0x54, 0x42, 0xfb, 0xe6, 0x73, 0xee,
	0x99, 0x9b, 0x33, 0x77, 0xce, 0x4c, 0x20, 0xbc, 0xde, 0x98, 0xf4, 0x36, 0xcd, 0x85, 0xd2, 0x49,
	0x51, 0x1a, 0x34, 0xf1, 0x19, 0xf4, 0xde, 0x95, 0xc6, 0xdc, 0xb0, 0x08, 0xfa, 0xa9, 0xd1, 0x28,
	0x35, 0x46, 0xde, 0xd4, 0x9b, 0x8d, 0xf9, 0x01, 0xb2, 0x4f, 0xa1, 0x8b, 0xfb, 0x42, 0x46, 0xfe,
	0xd4, 0x9b, 0x4d, 0xe6, 0x90, 0x90, 0x7e, 0xb9, 0x2f, 0x24, 0x27, 0x3e, 0xfe, 0xdb, 0x87, 0xd1,
	0xb9, 0xeb, 0x7b, 0x29, 0x45, 0x26, 0x4b, 0xf6, 0x0a, 0x06, 0x45, 0x29, 0x77, 0xb9, 0xb0, 0x79,
	0xd3, 0xea, 0x1e, 0xb3, 0x37, 0x30, 0x44, 0xb5, 0x95, 0x16, 0xc5, 0xb6, 0xa0, 0x86, 0x5d, 0x7e,
	0x24, 0xd8, 0x4b, 0x08, 0x72, 0xa9, 0xd6, 0x39, 0x46, 0x1d, 0x2a, 0x35, 0x88, 0x7d, 0x02, 0x60,
	0x51, 0xa0, 0x5c, 0x95, 0xc6, 0x60, 0xd4, 0xa5, 0x9e, 0x43, 0x62, 0xb8, 0x31, 0xc8, 0xbe, 0x82,
	0x13, 0x2c, 0x85, 0xb6, 0x22, 0x45, 0x65, 0xb4, 0xad, 0x55, 0x3d, 0x52, 0x85, 0xed, 0x02, 0x89,
	0x3f, 0x87, 0xa7, 0xa5, 0x4c, 0xa5, 0x2a, 0xb0, 0x11, 0x06, 0x24, 0x1c, 0x1f, 0x48, 0x12, 0x7d,
	0x0c, 0x83, 0xb5, 0xb0, 0xab, 0xca, 0xca, 0x2c, 0xea, 0x93, 0x95, 0xfe, 0x5a, 0xd8, 0x2b, 0x2b,
	0x33, 0xf6, 0x1a, 0x86, 0xae, 0xb4, 0x51, 0x5b, 0x85, 0xd1, 0x80, 0x6a, 0x4e, 0xfb, 0x93, 0xc3,
	0xec, 0x0d, 0xf4, 0x0a, 0x37, 0x9d, 0x68, 0x38, 0xf5, 0x66, 0xa3, 0x79, 0x50, 0xcf, 0x8a, 0xd7,
	0x64, 0xfc, 0x0d, 0x04, 0x0b, 0x14, 0x58, 0x59, 0xc6, 0xa0, 0xdb, 0x1a, 0x0f, 0x7d, 0xb7, 0x36,
	0xef, 0xb7, 0x37, 0x1f, 0xff, 0xe3, 0xc1, 0xb3, 0xb3, 0x34, 0x35, 0x95, 0xc6, 0x1f, 0x0f, 0xbf,
	0x33, 0x83, 0x30, 0x35, 0xdb, 0xad, 0xd1, 0xab, 0xa3, 0x17, 0x8f, 0x56, 0x4d, 0x6a, 0xfe, 0x5e,
	0xb9, 0x04, 0x66, 0x0b, 0x99, 0xaa, 0x1b, 0x95, 0xb6, 0xb4, 0xfe, 0xb4, 0x33, 0x1b, 0xcd, 0xbf,
	0x4c, 0xde, 0xeb, 0x9b, 0x2c, 0x1a, 0xe9, 0x81, 0x78, 0xab, 0xb1, 0xdc, 0xf3, 0xd0, 0xbe, 0x47,
	0xbf, 0xba, 0x80, 0x17, 0x8f, 0x4a, 0x59, 0x08, 0x9d, 0x5b, 0xb9, 0x27, 0x2f, 0x43, 0xee, 0x3e,
	0xd9, 0x73, 0xe8, 0xed, 0xc4, 0xa6, 0x92, 0xcd, 0xae, 0x6a, 0xf0, 0x83, 0xff, 0x9d, 0x17, 0xff,
	0x02, 0xc0, 0x55, 0x9a, 0x7f, 0xf8, 0x48, 0x5c, 0x4f, 0x6d, 0x32, 0x69, 0xa3, 0xce, 0xb4, 0x33,
	0x1b, 0xf3, 0x1a, 0xc4, 0x7f, 0x7a, 0x30, 0x5a, 0x1e, 0x8f, 0x9b, 0x4d, 0xc0, 0x47, 0xd3, 0x58,
	0xf1, 0xd1, 0xd4, 0xab, 0x74, 0x5a, 0x3b, 0x19, 0xf2, 0x1a, 0x38, 0xf6, 0xb7, 0xca, 0xa0, 0x68,
	0x22, 0x57, 0x03, 0x76, 0x0a, 0x27, 0x3b, 0xb1, 0x51, 0xd9, 0xaa, 0xd2, 0xa8, 0x36, 0x2b, 0xba,
	0x36, 0x14, 0xbc, 0x2e, 0x7f, 0x46, 0x85, 0x2b, 0xc7, 0x53, 0xea, 0x9d, 0xf3, 0x4c, 0xa0, 0x68,
	0x12, 0x47, 0xdf, 0xf1, 0x1f, 0x1e, 0xbc, 0xb8, 0xd2, 0x3b, 0x59, 0xaa, 0x1b, 0x25, 0xb3, 0xb6,
	0xab, 0x04, 0x46, 0xad, 0x4c, 0x92, 0xbd, 0xd1, 0x7c, 0x9c, 0xb4, 0x24, 0xbc, 0x2d, 0x70, 0x37,
	0xc6, 0xaa, 0xb5, 0x16, 0x58, 0x95, 0xb5, 0x73, 0x17, 0xfd, 0x03, 0xc1, 0x3e, 0x83, 0x20, 0x2d,
	0xf7, 0x05, 0x1a, 0xb2, 0x3f, 0x99, 0xf7, 0x93, 0x0b, 0x82, 0xbc, 0xa1, 0xe3, 0xbf, 0x3c, 0x38,
	0x59, 0xa8, 0xb5, 0x7e, 0x68, 0xe2, 0x12, 0x9e, 0xb7, 0x7e, 0x63, 0xf5, 0xbb, 0xc2, 0x7c, 0x65,
	0xd5, 0xba, 0x71, 0xf3, 0x32, 0x79, 0xd4, 0x3a, 0x67, 0xad, 0x35, 0xbf, 0x2a, 0xcc, 0x17, 0x6a,
	0xcd, 0x3e, 0x82, 0x3e, 0xde, 0xad, 0xe8, 0xe4, 0x6a, 0x73, 0x01, 0xde, 0x5d, 0x36, 0x67, 0xe7,
	0x6c, 0xca, 0x92, 0x9c, 0x8d, 0x79, 0x83, 0xe2, 0x0b, 0x18, 0xd2, 0xd8, 0xce, 0x4d, 0xb6, 0x67,
	0xdf, 0xc2, 0xb8, 0x7d, 0x41, 0x23, 0x8f, 0x72, 0xc9, 0x92, 0xff, 0x38, 0xe6, 0x0f, 0x74, 0xf1,
	0x1a, 0x7a, 0xf5, 0xec, 0x23, 0xe8, 0xef, 0x64, 0x69, 0x0f, 0x93, 0x7c, 0xca, 0x0f, 0x90, 0x7d,
	0xe1, 0xb2, 0xe3, 0xde, 0x23, 0xf2, 0xe5, 0x46, 0xdc, 0x7a, 0xa3, 0x78, 0x53, 0x73, 0x6f, 0xdb,
	0xb5, 0xc9, 0xf6, 0xe4, 0x71, 0x34, 0x87, 0xe4, 0xde, 0x1a, 0x27, 0x3e, 0xbe, 0x84, 0x09, 0x51,
	0x6e, 0xbb, 0x87, 0x77, 0xb2, 0x73, 0xbd, 0xb9, 0x6d, 0x26, 0x15, 0xd4, 0x0b, 0xb8, 0xa3, 0x8e,
	0x97, 0xdf, 0x7f, 0xec, 0xf2, 0x9f, 0xc3, 0x80, 0xb4, 0xcb, 0x3b, 0xdb, 0xca, 0xb5, 0xf7, 0x20,
	0xd7, 0xff, 0xe3, 0xe6, 0xf4, 0x7b, 0x18, 0xde, 0x3f, 0xbe, 0x8c, 0xc1, 0xe4, 0xac, 0xc2, 0xdc,
	0x94, 0x0a, 0xf7, 0xdc, 0x54, 0x3a, 0x0b, 0x9f, 0xb0, 0x01, 0x74, 0xb9, 0xb8, 0xc1, 0xd0, 0x63,
	0x13, 0x80, 0xa5, 0xd4, 0x99, 0x2c, 0xb7, 0x4a, 0x63, 0xe8, 0x9f, 0xbe, 0x86, 0xa0, 0x4e, 0x86,
	0xd3, 0x2c, 0xde, 0x5e, 0xbc, 0x0b, 0x9f, 0xb0, 0x3e, 0x74, 0x16, 0x3f, 0xcf, 0x43, 0xef, 0x3a,
	0xa0, 0xff, 0x82, 0xaf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xad, 0xa4, 0x85, 0x00, 0x1f, 0x06,
	0x00, 0x00,
}
