// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

/*
Package libproto is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	blockchain.proto
	communication.proto
	request.proto
	response.proto

It has these top-level messages:
	VerifyTxReq
	VerifyTxResp
	VerifyBlockReq
	VerifyBlockResp
	BlockTxHashes
	BlockTxHashesReq
	Proof
	BlockHeader
	Status
	AccountGasLimit
	RichStatus
	Transaction
	UnverifiedTransaction
	SignedTransaction
	BlockBody
	Block
	BlockWithProof
	BlockTxs
	Message
	Call
	Request
	BatchRequest
	FullTransaction
	Response
*/
package libproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ret int32

const (
	Ret_Ok                Ret = 0
	Ret_InvalidNonce      Ret = 1
	Ret_Dup               Ret = 2
	Ret_InvalidUntilBlock Ret = 3
	Ret_BadSig            Ret = 4
	Ret_NotReady          Ret = 5
	Ret_Busy              Ret = 6
)

var Ret_name = map[int32]string{
	0: "Ok",
	1: "InvalidNonce",
	2: "Dup",
	3: "InvalidUntilBlock",
	4: "BadSig",
	5: "NotReady",
	6: "Busy",
}
var Ret_value = map[string]int32{
	"Ok":                0,
	"InvalidNonce":      1,
	"Dup":               2,
	"InvalidUntilBlock": 3,
	"BadSig":            4,
	"NotReady":          5,
	"Busy":              6,
}

func (x Ret) String() string {
	return proto.EnumName(Ret_name, int32(x))
}
func (Ret) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VerifyTxReq struct {
	ValidUntilBlock uint64 `protobuf:"varint,1,opt,name=valid_until_block,json=validUntilBlock" json:"valid_until_block,omitempty"`
	Hash            []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature       []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Crypto          Crypto `protobuf:"varint,4,opt,name=crypto,enum=Crypto" json:"crypto,omitempty"`
	TxHash          []byte `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Signer          []byte `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
	Nonce           string `protobuf:"bytes,7,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *VerifyTxReq) Reset()                    { *m = VerifyTxReq{} }
func (m *VerifyTxReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyTxReq) ProtoMessage()               {}
func (*VerifyTxReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VerifyTxReq) GetValidUntilBlock() uint64 {
	if m != nil {
		return m.ValidUntilBlock
	}
	return 0
}

func (m *VerifyTxReq) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *VerifyTxReq) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VerifyTxReq) GetCrypto() Crypto {
	if m != nil {
		return m.Crypto
	}
	return Crypto_SECP
}

func (m *VerifyTxReq) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *VerifyTxReq) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *VerifyTxReq) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type VerifyTxResp struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Ret    Ret    `protobuf:"varint,2,opt,name=ret,enum=Ret" json:"ret,omitempty"`
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *VerifyTxResp) Reset()                    { *m = VerifyTxResp{} }
func (m *VerifyTxResp) String() string            { return proto.CompactTextString(m) }
func (*VerifyTxResp) ProtoMessage()               {}
func (*VerifyTxResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VerifyTxResp) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *VerifyTxResp) GetRet() Ret {
	if m != nil {
		return m.Ret
	}
	return Ret_Ok
}

func (m *VerifyTxResp) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

type VerifyBlockReq struct {
	Id   uint64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Reqs []*VerifyTxReq `protobuf:"bytes,2,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *VerifyBlockReq) Reset()                    { *m = VerifyBlockReq{} }
func (m *VerifyBlockReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyBlockReq) ProtoMessage()               {}
func (*VerifyBlockReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerifyBlockReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VerifyBlockReq) GetReqs() []*VerifyTxReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type VerifyBlockResp struct {
	Id  uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ret Ret    `protobuf:"varint,2,opt,name=ret,enum=Ret" json:"ret,omitempty"`
}

func (m *VerifyBlockResp) Reset()                    { *m = VerifyBlockResp{} }
func (m *VerifyBlockResp) String() string            { return proto.CompactTextString(m) }
func (*VerifyBlockResp) ProtoMessage()               {}
func (*VerifyBlockResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerifyBlockResp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VerifyBlockResp) GetRet() Ret {
	if m != nil {
		return m.Ret
	}
	return Ret_Ok
}

type BlockTxHashes struct {
	Height          uint64           `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	TxHashes        [][]byte         `protobuf:"bytes,2,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	BlockGasLimit   uint64           `protobuf:"varint,3,opt,name=block_gas_limit,json=blockGasLimit" json:"block_gas_limit,omitempty"`
	AccountGasLimit *AccountGasLimit `protobuf:"bytes,4,opt,name=account_gas_limit,json=accountGasLimit" json:"account_gas_limit,omitempty"`
}

func (m *BlockTxHashes) Reset()                    { *m = BlockTxHashes{} }
func (m *BlockTxHashes) String() string            { return proto.CompactTextString(m) }
func (*BlockTxHashes) ProtoMessage()               {}
func (*BlockTxHashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockTxHashes) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockTxHashes) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *BlockTxHashes) GetBlockGasLimit() uint64 {
	if m != nil {
		return m.BlockGasLimit
	}
	return 0
}

func (m *BlockTxHashes) GetAccountGasLimit() *AccountGasLimit {
	if m != nil {
		return m.AccountGasLimit
	}
	return nil
}

type BlockTxHashesReq struct {
	Height uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *BlockTxHashesReq) Reset()                    { *m = BlockTxHashesReq{} }
func (m *BlockTxHashesReq) String() string            { return proto.CompactTextString(m) }
func (*BlockTxHashesReq) ProtoMessage()               {}
func (*BlockTxHashesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockTxHashesReq) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*VerifyTxReq)(nil), "VerifyTxReq")
	proto.RegisterType((*VerifyTxResp)(nil), "VerifyTxResp")
	proto.RegisterType((*VerifyBlockReq)(nil), "VerifyBlockReq")
	proto.RegisterType((*VerifyBlockResp)(nil), "VerifyBlockResp")
	proto.RegisterType((*BlockTxHashes)(nil), "BlockTxHashes")
	proto.RegisterType((*BlockTxHashesReq)(nil), "BlockTxHashesReq")
	proto.RegisterEnum("Ret", Ret_name, Ret_value)
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x25, 0x1f, 0x4d, 0xdb, 0x69, 0xb6, 0x75, 0x2d, 0x3e, 0x22, 0x40, 0x22, 0xca, 0x01, 0x45,
	0x3d, 0xe4, 0x50, 0x4e, 0x48, 0x5c, 0x28, 0x48, 0x80, 0x84, 0x16, 0xc9, 0x2c, 0x70, 0x8c, 0xbc,
	0x89, 0x69, 0xac, 0x2d, 0x49, 0x36, 0x76, 0x50, 0xfb, 0x97, 0xf8, 0x3b, 0xfc, 0x21, 0xe4, 0x49,
	0x56, 0x4d, 0x59, 0xf5, 0xe6, 0x79, 0x33, 0xf3, 0xfc, 0xe6, 0xcd, 0x00, 0xf0, 0x56, 0x17, 0x49,
	0xdd, 0x54, 0xba, 0x7a, 0x4a, 0xae, 0x77, 0x55, 0x76, 0x93, 0x15, 0x5c, 0x96, 0x1d, 0x12, 0xfd,
	0xb5, 0x60, 0xf6, 0x5d, 0x34, 0xf2, 0xe7, 0xe1, 0x6a, 0xcf, 0xc4, 0x2d, 0x5d, 0xc1, 0xf2, 0x37,
	0xdf, 0xc9, 0x3c, 0x6d, 0x4b, 0x2d, 0x77, 0x29, 0xd6, 0x07, 0x56, 0x68, 0xc5, 0x2e, 0x5b, 0x60,
	0xe2, 0x9b, 0xc1, 0x37, 0x06, 0xa6, 0x14, 0xdc, 0x82, 0xab, 0x22, 0xb0, 0x43, 0x2b, 0xf6, 0x19,
	0xbe, 0xe9, 0x73, 0x98, 0x2a, 0xb9, 0x2d, 0xb9, 0x6e, 0x1b, 0x11, 0x38, 0x98, 0x38, 0x02, 0xf4,
	0x05, 0x78, 0x59, 0x73, 0xa8, 0x75, 0x15, 0xb8, 0xa1, 0x15, 0xcf, 0xd7, 0xe3, 0xe4, 0x1d, 0x86,
	0xac, 0x87, 0xe9, 0x13, 0x18, 0xeb, 0x7d, 0x8a, 0xac, 0x23, 0x6c, 0xf6, 0xf4, 0xfe, 0xa3, 0xe1,
	0x7d, 0x0c, 0x9e, 0xa1, 0x11, 0x4d, 0xe0, 0x75, 0x78, 0x17, 0xd1, 0x87, 0x30, 0x2a, 0xab, 0x32,
	0x13, 0xc1, 0x38, 0xb4, 0xe2, 0x29, 0xeb, 0x82, 0xe8, 0x07, 0xf8, 0xc7, 0xa1, 0x54, 0x3d, 0xa4,
	0xb5, 0xfe, 0xa3, 0x75, 0x1a, 0xa1, 0x71, 0x82, 0xf9, 0xda, 0x4d, 0x98, 0xd0, 0xcc, 0x00, 0x83,
	0xef, 0x9c, 0xe1, 0x77, 0xd1, 0x06, 0xe6, 0x1d, 0x31, 0x3a, 0x60, 0x0c, 0x9b, 0x83, 0x2d, 0xf3,
	0xde, 0x21, 0x5b, 0xe6, 0x34, 0x04, 0xb7, 0x11, 0xb7, 0x2a, 0xb0, 0x43, 0x27, 0x9e, 0xad, 0xfd,
	0x64, 0x60, 0x2e, 0xc3, 0x4c, 0xf4, 0x1a, 0x16, 0x27, 0x1c, 0xaa, 0xbe, 0x47, 0x72, 0x46, 0x56,
	0xf4, 0xc7, 0x82, 0x0b, 0xec, 0xba, 0x42, 0xf9, 0x42, 0x19, 0xa1, 0x85, 0x90, 0xdb, 0x42, 0xf7,
	0xdd, 0x7d, 0x44, 0x9f, 0xc1, 0xb4, 0x9f, 0x58, 0x74, 0x5a, 0x7c, 0x36, 0xd1, 0x77, 0x4d, 0x2f,
	0x61, 0x81, 0x8b, 0x4d, 0xb7, 0x5c, 0xa5, 0x3b, 0xf9, 0x4b, 0x6a, 0x1c, 0xd3, 0x65, 0x17, 0x08,
	0x7f, 0xe0, 0xea, 0xb3, 0x01, 0xe9, 0x1b, 0x58, 0xf2, 0x2c, 0xab, 0xda, 0x52, 0x0f, 0x2a, 0xcd,
	0xe6, 0x66, 0x6b, 0x92, 0xbc, 0xed, 0x32, 0x77, 0xc5, 0x6c, 0xc1, 0x4f, 0x81, 0x68, 0x05, 0xe4,
	0x44, 0xab, 0x71, 0xeb, 0x8c, 0xdc, 0x55, 0x06, 0x0e, 0x13, 0x9a, 0x7a, 0x60, 0x7f, 0xb9, 0x21,
	0x0f, 0x28, 0x01, 0xff, 0x53, 0x89, 0xe7, 0x76, 0x69, 0xf6, 0x49, 0x2c, 0x3a, 0x06, 0xe7, 0x7d,
	0x5b, 0x13, 0x9b, 0x3e, 0x82, 0x65, 0x9f, 0x3a, 0x5e, 0x22, 0x71, 0x28, 0x80, 0xb7, 0xe1, 0xf9,
	0x57, 0xb9, 0x25, 0x2e, 0xf5, 0x61, 0x72, 0x59, 0x69, 0x26, 0x78, 0x7e, 0x20, 0x23, 0x3a, 0x01,
	0x77, 0xd3, 0xaa, 0x03, 0xf1, 0xae, 0x3d, 0x3c, 0xf9, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x16, 0x78, 0x7b, 0xcf, 0x12, 0x03, 0x00, 0x00,
}
